/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MuckRakerContractInterface extends Interface {
  functions: {
    create_product: TypedFunctionDescription<{
      encode([ownerAddress, productCID]: [string, string]): string;
    }>;

    get_owner: TypedFunctionDescription<{
      encode([productCID]: [string]): string;
    }>;

    get_projects: TypedFunctionDescription<{
      encode([ownerAddress]: [string]): string;
    }>;
  };

  events: {};
}

export class MuckRakerContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MuckRakerContract;
  attach(addressOrName: string): MuckRakerContract;
  deployed(): Promise<MuckRakerContract>;

  on(event: EventFilter | string, listener: Listener): MuckRakerContract;
  once(event: EventFilter | string, listener: Listener): MuckRakerContract;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MuckRakerContract;
  removeAllListeners(eventName: EventFilter | string): MuckRakerContract;
  removeListener(eventName: any, listener: Listener): MuckRakerContract;

  interface: MuckRakerContractInterface;

  functions: {
    create_product(
      ownerAddress: string,
      productCID: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    get_owner(productCID: string): Promise<string>;

    get_projects(ownerAddress: string): Promise<string[]>;
  };

  create_product(
    ownerAddress: string,
    productCID: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  get_owner(productCID: string): Promise<string>;

  get_projects(ownerAddress: string): Promise<string[]>;

  filters: {};

  estimate: {
    create_product(
      ownerAddress: string,
      productCID: string
    ): Promise<BigNumber>;

    get_owner(productCID: string): Promise<BigNumber>;

    get_projects(ownerAddress: string): Promise<BigNumber>;
  };
}
